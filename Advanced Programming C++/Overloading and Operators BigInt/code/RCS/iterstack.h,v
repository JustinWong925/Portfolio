head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2014.07.18.09.27.12;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.07.18.09.24.21;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.07.18.09.11.21;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.07.18.09.10.15;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.07.18.09.03.07;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: iterstack.h,v 1.4 2014-07-18 02:24:21-07 - - $

// 
// The class std::stack does not provide an iterator, which is
// needed for this class.  So, like std::stack, class iterstack
// is implemented on top of a container.
// 
// We use private inheritance because we want to restrict
// operations only to those few that are approved.  All functions
// are merely inherited from the container, with only ones needed
// being exported as public.
// 
// No implementation file is needed because all functions are
// inherited, and the convenience functions that are added are
// trivial, and so can be inline.
//
// Any underlying container which supports the necessary operations
// could be used, such as vector, list, or deque.
// 

#ifndef __ITERSTACK_H__
#define __ITERSTACK_H__

#include <vector>
using namespace std;

template <typename value_type>
class iterstack: private vector<value_type> {
   private:
      using stack_t = vector<value_type>;
      using stack_t::crbegin;
      using stack_t::crend;
      using stack_t::push_back;
      using stack_t::pop_back;
      using stack_t::back;
      using const_iterator = typename stack_t::const_reverse_iterator;
   public:   
      using stack_t::clear;
      using stack_t::empty;
      using stack_t::size;
      inline const_iterator begin() {return crbegin();}
      inline const_iterator end() {return crend();}
      inline void push (const value_type& value) {push_back (value);}
      inline void pop() {pop_back();}
      inline const value_type& top() const {return back();}
   
};

#endif

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.13 2014-06-26 17:21:55-07 - - $
d46 1
a46 1
	
@


1.3
log
@-
@
text
@d30 1
a30 8
      using vector<value_type>::crbegin;
      using vector<value_type>::crend;
      using vector<value_type>::push_back;
      using vector<value_type>::pop_back;
      using vector<value_type>::back;
      typedef typename vector<value_type>::const_reverse_iterator
              const_iterator;
      /*using stack_t = vector<value_type>;
d37 1
a37 11
	  */
   public:
      using vector<value_type>::clear;
      using vector<value_type>::empty;
      using vector<value_type>::size;
      const_iterator begin() { return crbegin(); }
      const_iterator end() { return crend(); }
      void push (const value_type& value) { push_back (value); }
      void pop() { pop_back(); }
      const value_type& top() const { return back(); }
   /*
d46 1
a46 1
	  */
@


1.2
log
@-
@
text
@d30 1
a30 1
   using vector<value_type>::crbegin;
d46 9
d63 1
@


1.1
log
@-
@
text
@d30 8
a37 1
      using stack_t = vector<value_type>;
d44 1
@
